"""Helpers for using Playwright from notebooks and more"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../00_core.ipynb.

# %% auto 0
__all__ = ['get_page', 'page_ready', 'frames_ready', 'wait_page', 'get_full_content', 'read_page_async', 'read_page']

# %% ../00_core.ipynb
from fastcore.utils import *
import uuid

from playwright.async_api import async_playwright, TimeoutError as PTimeoutError
from playwright_stealth import stealth_async
from anyio import from_thread

# %% ../00_core.ipynb
async def get_page(*args, **kwargs):
    p = await async_playwright().start()
    c = await p.chromium.launch(*args, **kwargs)
    ctx = await c.new_context()
    page = await ctx.new_page()
    page.stop = p.stop
    await stealth_async(page)
    return page

# %% ../00_core.ipynb
async def page_ready(page, pause=50, timeout=5000):
    "Waith until main content of `page` is ready"
    await page.wait_for_load_state('domcontentloaded')
    await page.wait_for_load_state('networkidle')
    await page.wait_for_timeout(pause)
    try: await page.wait_for_selector('meta', state="attached", timeout=timeout)
    except PTimeoutError as e: pass
    await page.wait_for_timeout(pause)

# %% ../00_core.ipynb
async def frames_ready(page, pause=50, timeout=5000):
    "Wait until all visible frames (if any) on `page` are ready"
    iframes = await page.query_selector_all('iframe:visible')
    if not iframes: return
    for iframe in iframes:
        await iframe.wait_for_element_state('visible', timeout=timeout)
        await page.wait_for_timeout(pause)
        frame = await iframe.content_frame()
        if frame:
            await frame.wait_for_load_state('domcontentloaded', timeout=timeout)
            await frame.wait_for_load_state('networkidle', timeout=timeout)

# %% ../00_core.ipynb
async def wait_page(page, pause=50, timeout=5000):
    "Wait until page and visible frames (if any) on `page` are ready"
    await page_ready(page, pause=pause, timeout=timeout)
    await frames_ready(page, pause=pause, timeout=timeout)

# %% ../00_core.ipynb
async def get_full_content(page):
    "Tuple of page content and dict of frames' content"
    main_content = await page.content()
    iframes = await page.query_selector_all('iframe')
    iframe_contents = {}
    for iframe in iframes:
        frame = await iframe.content_frame()
        if frame:
            key = await iframe.get_attribute('id') or str(uuid.uuid4())
            iframe_contents[key] = await frame.content()
    return main_content, iframe_contents

# %% ../00_core.ipynb
async def read_page_async(url, pause=50, timeout=5000):
    "Return contents of `url` and its iframes using Playwright async"
    page = await get_page()
    try:
        await page.goto(url)
        await wait_page(page, pause=pause, timeout=timeout)
        return await get_full_content(page)
    finally: await page.close()

# %% ../00_core.ipynb
def read_page(url, pause=50, timeout=5000):
    "Return contents of `url` and its iframes using Playwright"
    with from_thread.start_blocking_portal() as p: return p.call(read_page_async, url, pause, timeout)
